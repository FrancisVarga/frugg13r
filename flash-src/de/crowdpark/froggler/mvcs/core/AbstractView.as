package de.crowdpark.froggler.mvcs.core{	import de.crowdpark.froggler.mvcs.ApplicationContext;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IEventDispatcher;	/**	 * @author Francis Varga	 */	public class AbstractView extends MovieClip implements IInteractiveComponent	{		private var _mediator : IMediator;		private var _gameRoot : Main;		private var _autoShow : Boolean = true;		public function AbstractView()		{			this._gameRoot = ApplicationContext.Instance.root;			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			this.initMediator();			this.initView();		}		protected function get gameRoot() : Main		{			return this._gameRoot;		}		protected function initView() : void		{			dispatchEvent(new AbstractViewEvent(AbstractViewEvent.INIT_VIEW_COMPLETE));		}		protected function initMediator() : void		{			dispatchEvent(new AbstractViewEvent(AbstractViewEvent.INIT_MEDIATOR_COMPLETE));		}		protected function onRemovedFromStage(event : Event) : void		{			IEventDispatcher(event.currentTarget).removeEventListener(event.type, arguments['callee']);			this.mediator.dispose();		}		protected function onAddedToStage(event : Event) : void		{			IEventDispatcher(event.currentTarget).removeEventListener(event.type, arguments['callee']);			this.mediator.init(this);			if (this._autoShow) this.show();		}		public function get mediator() : IMediator		{			return _mediator;		}		public function set mediator(mediator : IMediator) : void		{			_mediator = mediator;		}		public function show() : void		{		}		public function hide() : void		{		}		public function dispose() : void		{			dispatchEvent(new AbstractViewEvent(AbstractViewEvent.DISPOSE));		}		public function set autoShow(autoShow : Boolean) : void		{			_autoShow = autoShow;		}	}}