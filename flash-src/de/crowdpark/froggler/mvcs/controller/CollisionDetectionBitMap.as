package de.crowdpark.froggler.mvcs.controller{	import utils.array.arrayContainsValue;	import utils.array.removeItem;	import de.crowdpark.froggler.components.Water;	import de.crowdpark.froggler.mvcs.views.board.BoardView;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * @author Francis Varga	 */	public class CollisionDetectionBitMap extends MovieClip	{		private static var _Instance : CollisionDetectionBitMap;		private var _hitItems : Array;		private var _waterRawItems : Array;		private var _waterBitMapItems : Vector.<BitmapData>;		private var _frog : FroggerController;		public static function get Instance() : CollisionDetectionBitMap		{			if (!_Instance) _Instance = new  CollisionDetectionBitMap();			return _Instance;		}		public function CollisionDetectionBitMap()		{			_hitItems = new Array();			_waterRawItems = WaterEnemysController.Instance.targetList;			_waterBitMapItems = new Vector.<BitmapData>();			_frog = FroggerController.Instance;			for (var i : int = 0; i < _waterRawItems.length; i++)			{				var water : Water = _waterRawItems[i];				_waterBitMapItems.push(drawBitMap(water));			}			this.addEventListener(Event.ENTER_FRAME, onEnterFrame);		}		private function drawBitMap(raw : MovieClip) : BitmapData		{			var rawRect : Rectangle = raw.getBounds(BoardView.Instance);			var rawBitMap : BitmapData = new BitmapData(rawRect.width, rawRect.height);			rawBitMap.draw(raw);			return rawBitMap;		}		private function onEnterFrame(event : Event) : void		{			for (var i : int = 0; i < _waterBitMapItems.length; i++)			{				var water : BitmapData = _waterBitMapItems[i];				var waterRAW : MovieClip = _waterRawItems[i];				var hit : Boolean = water.hitTest(new Point(waterRAW.x, waterRAW.y), 255, new Point(_frog.x, _frog.y));				if (hit)				{					IEventDispatcher(event.currentTarget).removeEventListener(event.type, arguments['callee']);					_frog.die();				}			}		}		private function getTargetBitMapData() : BitmapData		{			return drawBitMap(_frog);		}		public function dispose() : void		{		}		public function removeHitItem(target : MovieClip) : void		{			if (arrayContainsValue(_hitItems, target))			{				removeItem(_hitItems, target);			}		}		public function addHitItem(target : MovieClip) : void		{			_hitItems.push(target);		}	}}